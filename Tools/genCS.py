import re
import string
import xml.etree.ElementTree as ET



def visitComponentDeclaration(compDecl):
    name = compDecl.tag
    name = name[0].upper() + name[1:]

    fields = []

    for field in compDecl:
        fieldName = field.tag
        fieldType = field.attrib.get('type')
        fieldType = fieldType.replace("{", "<")
        fieldType = fieldType.replace("}", ">")
        fields.append((fieldName, fieldType))

    indent = ' ' * 4

    cSharpText = indent + ("public class %s : BaseComponent {\n" % name)

    argList = ""
    # declarations
    for fn, ft in fields:
        cSharpText += indent * 2 + "public {0} {1};\n".format(ft, fn);
        argList += "{0} {1}, ".format(ft, fn)

    if argList:
        argList = argList[:-2]
    cSharpText += "\n";

    # write data all at once, like a constructor
    cSharpText += (indent * 2 + "public void Populate(" + argList + ") {\n")
    for fn, ft in fields:
        cSharpText += (indent * 3 + "this.{0} = {0};\n").format(fn)

    cSharpText += (indent * 2 + "}\n\n")

    cSharpText += (indent * 2 + "public override String Serialize() {\n")
    cSharpText += (indent * 3 + 'return "";\n')
    cSharpText += (indent * 2 + "}\n\n")

    cSharpText += (indent * 2 + "public override bool Deserialize(String s) {\n")
    cSharpText += (indent * 3 + 'return false;\n')
    cSharpText += (indent * 2 + "}\n\n")

    cSharpText += (indent * 2 + "public override void Reset() {\n")
    cSharpText += (indent * 2 + "}\n\n")

    cSharpText += (indent + "}\n")

    return name, cSharpText

def parseComponentsXMLTreeToCSharp(sourceFilename, root):
    destFilename = "gen_components.cs"
    with open(destFilename, "wt") as f:
        headerText = """//
// DO NOT MODIFY THIS FILE
//
// This file is automatically generated by the genCS.py script operating on {0}
//

using BDG_ECS;
using System.Collections.Generic;
using String = System.String;
using Unity.Collections;
using UnityEngine;

namespace ECSteroids {{
""".format(sourceFilename)

        footerText = "}\n\n"

        f.write(headerText)

        for c in root:
            rootName, cSharpText = visitComponentDeclaration(c)
            f.write(cSharpText)
            f.write("\n")

        f.write(footerText)


def parseXMLToCSharp(sourceFilename):
    with open(sourceFilename) as f:
        xmlText = f.read()

        root = ET.fromstring(xmlText)
        if (root.tag != 'components'):
            print "I'm only handling components so far"
            return

        else:
            parseComponentsXMLTreeToCSharp(sourceFilename, root)



if __name__ == "__main__":
    parseXMLToCSharp("components.xml")
